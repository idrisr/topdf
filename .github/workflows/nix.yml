# Our desired pipeline using only a Nix shell environment
name: Check and build the TODOs API (Nix)

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

jobs:
  check_nix:
    name: check that it builds
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12]
    runs-on: ubuntu-22.04
    steps:
      - name: git checkout
        uses: actions/checkout@v3
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
      - uses: DeterminateSystems/magic-nix-cache-action@main

      # Nix-specific logic begins here
      - name: Check it builds
        run: nix build .

  # build_and_test_nix:
    # name: Test and build TODOs API
    # needs: check_nix
    # strategy:
      # matrix:
        # os: [ubuntu-22.04, macos-12]
    # runs-on: ubuntu-22.04
    # steps:
      # - name: git checkout
        # uses: actions/checkout@v3
      # - name: Install Nix
        # uses: DeterminateSystems/nix-installer-action@main
      # - uses: DeterminateSystems/magic-nix-cache-action@main
      # - name: Set up Rust cache
        # uses: actions/cache@v3
        # with:
          # path: |
            # ~/.cargo/bin/
            # ~/.cargo/registry/index/
            # ~/.cargo/registry/cache/
            # ~/.cargo/git/db/
            # target/
          # key: todos-app-${{ hashFiles('**/Cargo.lock') }}
      # - name: Test TODOs API
        # run: |
          # nix develop --command \
            # cargo test
      # - name: Build TODOs API
        # # nix build would also work here because `todos` is the default package
        # run: nix build .#todos
